{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "686882e0-cabb-4522-b64b-8c9fc4f67cf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import basic packages to read and explore data\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "27647bc5-2617-422a-bd1d-3b4b09f2690e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Read in data\n",
    "df=pd.read_csv(\"ACME-HappinessSurvey2020.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dc8c4eb1-1c38-4de9-9647-f6c7d5294ac9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Y  X1  X2  X3  X4  X5  X6\n",
       "0  0   3   3   3   4   2   4\n",
       "1  0   3   2   3   5   4   3\n",
       "2  1   5   3   3   3   3   5\n",
       "3  0   5   4   3   3   3   5\n",
       "4  0   5   4   3   3   3   5"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Just look to see the basics of what we have\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af0e2dce-7f62-473d-b752-a8d921e34c76",
   "metadata": {},
   "source": [
    "This is what the variables we have here represent\n",
    "\n",
    "\n",
    "\n",
    "Y = target attribute (Y) with values indicating 0 (unhappy) and 1 (happy) customers\n",
    "\n",
    "X1 = my order was delivered on time\n",
    "\n",
    "X2 = contents of my order was as I expected\n",
    "\n",
    "X3 = I ordered everything I wanted to order\n",
    "\n",
    "X4 = I paid a good price for my order\n",
    "\n",
    "X5 = I am satisfied with my courier\n",
    "\n",
    "X6 = the app makes ordering easy for me\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a7959fce-8801-4ec7-a0df-49eba5cc7a28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Y     0\n",
       "X1    0\n",
       "X2    0\n",
       "X3    0\n",
       "X4    0\n",
       "X5    0\n",
       "X6    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Do we have any missing values?\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dd4c6d78-b72e-44ec-95b7-5ce3b81391e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#No missing values. Let's split off the target and create a different dataframe with features.\n",
    "y=df[\"Y\"]\n",
    "X=df.drop(columns=[\"Y\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "31530415-f456-4ffd-af42-c4d423ac2838",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(126, 6)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "875bb215-08e9-47b5-a2dc-1815457357fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>126.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>126.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.333333</td>\n",
       "      <td>2.531746</td>\n",
       "      <td>3.309524</td>\n",
       "      <td>3.746032</td>\n",
       "      <td>3.650794</td>\n",
       "      <td>4.253968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.800000</td>\n",
       "      <td>1.114892</td>\n",
       "      <td>1.023440</td>\n",
       "      <td>0.875776</td>\n",
       "      <td>1.147641</td>\n",
       "      <td>0.809311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               X1          X2          X3          X4          X5          X6\n",
       "count  126.000000  126.000000  126.000000  126.000000  126.000000  126.000000\n",
       "mean     4.333333    2.531746    3.309524    3.746032    3.650794    4.253968\n",
       "std      0.800000    1.114892    1.023440    0.875776    1.147641    0.809311\n",
       "min      1.000000    1.000000    1.000000    1.000000    1.000000    1.000000\n",
       "25%      4.000000    2.000000    3.000000    3.000000    3.000000    4.000000\n",
       "50%      5.000000    3.000000    3.000000    4.000000    4.000000    4.000000\n",
       "75%      5.000000    3.000000    4.000000    4.000000    4.000000    5.000000\n",
       "max      5.000000    5.000000    5.000000    5.000000    5.000000    5.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Overall look at how the values are distributed\n",
    "X.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f3f8630f-a78e-442e-b10b-d87652a283b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cor=X.corr()\n",
    "sns.heatmap(cor, annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6254e69c-3a8f-4a78-ba2d-d3d4e0cb6189",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of satisfied customers:  54.761904761904766 %\n"
     ]
    }
   ],
   "source": [
    "#We can see what percentage of our sample are satifised.\n",
    "print(\"Percentage of satisfied customers: \",y.mean()*100,'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "06753d5c-5ec1-496e-ba20-931c4bc16823",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.087719</td>\n",
       "      <td>2.561404</td>\n",
       "      <td>3.140351</td>\n",
       "      <td>3.684211</td>\n",
       "      <td>3.368421</td>\n",
       "      <td>4.105263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.851064</td>\n",
       "      <td>1.134170</td>\n",
       "      <td>1.007802</td>\n",
       "      <td>0.848484</td>\n",
       "      <td>1.189712</td>\n",
       "      <td>0.838455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              X1         X2         X3         X4         X5         X6\n",
       "count  57.000000  57.000000  57.000000  57.000000  57.000000  57.000000\n",
       "mean    4.087719   2.561404   3.140351   3.684211   3.368421   4.105263\n",
       "std     0.851064   1.134170   1.007802   0.848484   1.189712   0.838455\n",
       "min     1.000000   1.000000   1.000000   2.000000   1.000000   2.000000\n",
       "25%     4.000000   2.000000   3.000000   3.000000   3.000000   3.000000\n",
       "50%     4.000000   3.000000   3.000000   4.000000   4.000000   4.000000\n",
       "75%     5.000000   3.000000   4.000000   4.000000   4.000000   5.000000\n",
       "max     5.000000   5.000000   5.000000   5.000000   5.000000   5.000000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[y==0].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5f62b581-2f0d-4900-b1c6-d4f73fafb93a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.536232</td>\n",
       "      <td>2.507246</td>\n",
       "      <td>3.449275</td>\n",
       "      <td>3.797101</td>\n",
       "      <td>3.884058</td>\n",
       "      <td>4.376812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.698311</td>\n",
       "      <td>1.106441</td>\n",
       "      <td>1.022342</td>\n",
       "      <td>0.900649</td>\n",
       "      <td>1.064621</td>\n",
       "      <td>0.768908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              X1         X2         X3         X4         X5         X6\n",
       "count  69.000000  69.000000  69.000000  69.000000  69.000000  69.000000\n",
       "mean    4.536232   2.507246   3.449275   3.797101   3.884058   4.376812\n",
       "std     0.698311   1.106441   1.022342   0.900649   1.064621   0.768908\n",
       "min     3.000000   1.000000   1.000000   1.000000   1.000000   1.000000\n",
       "25%     4.000000   2.000000   3.000000   3.000000   3.000000   4.000000\n",
       "50%     5.000000   2.000000   3.000000   4.000000   4.000000   5.000000\n",
       "75%     5.000000   3.000000   4.000000   4.000000   5.000000   5.000000\n",
       "max     5.000000   5.000000   5.000000   5.000000   5.000000   5.000000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[y==1].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35678d45-e81f-4503-b4a6-63bbf0b7e681",
   "metadata": {},
   "source": [
    "We can see some differences. The \"on time\" minimum for satisfied customers was 3 while we had values below three for non satisfied customers. There was also a significant difference in the means for X1 and X5 both of which related to delivery"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4261e552-0721-42ca-a883-01524b5acf06",
   "metadata": {},
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "739967ff-6b95-48b0-96f9-73eced205e9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import modules to create a Random Forest model and assess it\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bae76554-da27-424c-99e4-7653501d4a99",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set up a hyper parameter grid for a random forest classifier\n",
    "params_rf={'n_estimators': [50, 100, 150, 200],\n",
    " 'max_depth': [2, 5, 10, None]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "efd26287-4e4b-4d13-8d2b-24d535e6f986",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 16 candidates, totalling 48 fits\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, estimator=RandomForestClassifier(),\n",
       "             param_grid={'max_depth': [2, 5, 10, None],\n",
       "                         'n_estimators': [50, 100, 150, 200]},\n",
       "             scoring='accuracy', verbose=1)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create the grid search object and fit it \n",
    "rf_grid=GridSearchCV(RandomForestClassifier(),params_rf,scoring=\"accuracy\",cv=3,verbose=1)\n",
    "rf_grid.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "57987ffb-5fc8-44a4-9731-eb17355ab6ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_rf=rf_grid.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cd5baff5-8698-4db5-862e-46fe61dac98b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[42 15]\n",
      " [ 5 64]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y,y_pred_rf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ec4d99f5-3c0f-488f-9a11-806c3ab6156a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8412698412698413\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y,y_pred_rf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d2566036-0281-4e81-96a0-ed1696f5f291",
   "metadata": {},
   "outputs": [],
   "source": [
    "#try LightGBM\n",
    "from lightgbm import LGBMClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e5063528-7bb2-4ff9-b12b-15989772919c",
   "metadata": {},
   "outputs": [],
   "source": [
    "lgbmparams = {'num_leaves':[10,20,30,40],\n",
    "             'max_depth':[1,2,4,-1],\n",
    "             'n_estimators':[50,100,150,200],\n",
    "             'learning_rate':[0.01,0.1,0.2],\n",
    "              'reg_alpha':[0,0.01,0.1],\n",
    "              'reg_lambda':[0,0.01,0.1]\n",
    "             }\n",
    "             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5df5ce08-524a-4792-9044-9bd9b72d7b33",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set up grid search for LightGBM and fit to training data\n",
    "lgb_grid=GridSearchCV(LGBMClassifier(),lgbmparams,scoring=\"accuracy\",cv=3,verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a243d71a-7803-483a-8496-8c46e75dc7d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=LGBMClassifier(),\n",
       "             param_grid={'learning_rate': [0.01, 0.1, 0.2],\n",
       "                         'max_depth': [1, 2, 4, -1],\n",
       "                         'n_estimators': [50, 100, 150, 200],\n",
       "                         'num_leaves': [10, 20, 30, 40],\n",
       "                         'reg_alpha': [0, 0.01, 0.1],\n",
       "                         'reg_lambda': [0, 0.01, 0.1]},\n",
       "             scoring='accuracy')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lgb_grid.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "30a8d019-05d5-41a1-820d-1ed08e911c19",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_lg=lgb_grid.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "65e0ea84-be9a-4b05-a46b-48f0ef646762",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8015873015873016\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y,y_pred_lg))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1585fc9d-566d-42ca-af37-0eca76687234",
   "metadata": {},
   "source": [
    "See if some feature engineering can improve things"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e0e68d55-5646-4eff-b6db-7b35d5d3a889",
   "metadata": {},
   "outputs": [],
   "source": [
    "X[\"num_good_scores\"]=(X>3).sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "42a065e3-2285-43bc-96fe-0e665df4a75f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "      <th>num_good_scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X1  X2  X3  X4  X5  X6  num_good_scores\n",
       "0   3   3   3   4   2   4                2\n",
       "1   3   2   3   5   4   3                2\n",
       "2   5   3   3   3   3   5                2\n",
       "3   5   4   3   3   3   5                3\n",
       "4   5   4   3   3   3   5                3"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c460aee2-c21a-453e-87bb-5706ef6d2ab6",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_old=X[[\"X1\",\"X2\",\"X3\",\"X4\",\"X5\",\"X6\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d4a8d3f0-96ce-4957-aece-cd2ef72dadfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "X['num_bad_scores']=(X_old<3).sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c1fa4671-a7c0-44f1-943f-cf8dcec64f09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "      <th>num_good_scores</th>\n",
       "      <th>num_bad_scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X1  X2  X3  X4  X5  X6  num_good_scores  num_bad_scores\n",
       "0   3   3   3   4   2   4                2               1\n",
       "1   3   2   3   5   4   3                2               1\n",
       "2   5   3   3   3   3   5                2               0\n",
       "3   5   4   3   3   3   5                3               0\n",
       "4   5   4   3   3   3   5                3               0"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "10458b3c-345d-40cc-9590-3200e342c8ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    57.000000\n",
       "mean      3.140351\n",
       "std       1.528755\n",
       "min       0.000000\n",
       "25%       2.000000\n",
       "50%       3.000000\n",
       "75%       4.000000\n",
       "max       5.000000\n",
       "Name: num_good_scores, dtype: float64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[y==0].num_good_scores.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "53e89c7f-6542-4c7b-8af9-ce2d44262cb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    69.000000\n",
       "mean      3.797101\n",
       "std       1.219688\n",
       "min       1.000000\n",
       "25%       3.000000\n",
       "50%       4.000000\n",
       "75%       5.000000\n",
       "max       6.000000\n",
       "Name: num_good_scores, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[y==1].num_good_scores.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f59785f3-7c63-4a4d-a7e7-0e9c742831ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(1,6):\n",
    "    colname=\"number_of_scores_of_\"+str(i)\n",
    "    X[colname]=(X_old==i).sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d6ea2a22-3121-4f20-bf54-b06d8a63ee51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "      <th>num_good_scores</th>\n",
       "      <th>num_bad_scores</th>\n",
       "      <th>number_of_scores_of_1</th>\n",
       "      <th>number_of_scores_of_2</th>\n",
       "      <th>number_of_scores_of_3</th>\n",
       "      <th>number_of_scores_of_4</th>\n",
       "      <th>number_of_scores_of_5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X1  X2  X3  X4  X5  X6  num_good_scores  num_bad_scores  \\\n",
       "0   3   3   3   4   2   4                2               1   \n",
       "1   3   2   3   5   4   3                2               1   \n",
       "2   5   3   3   3   3   5                2               0   \n",
       "3   5   4   3   3   3   5                3               0   \n",
       "4   5   4   3   3   3   5                3               0   \n",
       "\n",
       "   number_of_scores_of_1  number_of_scores_of_2  number_of_scores_of_3  \\\n",
       "0                      0                      1                      3   \n",
       "1                      0                      1                      3   \n",
       "2                      0                      0                      4   \n",
       "3                      0                      0                      3   \n",
       "4                      0                      0                      3   \n",
       "\n",
       "   number_of_scores_of_4  number_of_scores_of_5  \n",
       "0                      2                      0  \n",
       "1                      1                      1  \n",
       "2                      0                      2  \n",
       "3                      1                      2  \n",
       "4                      1                      2  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "84751900-5713-40cf-9a17-6b59c0957201",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 16 candidates, totalling 48 fits\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, estimator=RandomForestClassifier(),\n",
       "             param_grid={'max_depth': [2, 5, 10, None],\n",
       "                         'n_estimators': [50, 100, 150, 200]},\n",
       "             scoring='accuracy', verbose=1)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_grid2=GridSearchCV(RandomForestClassifier(),params_rf,scoring=\"accuracy\",cv=3,verbose=1)\n",
    "rf_grid2.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "d8dec136-dec4-49b2-87fb-45ed023e66c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 2, 'n_estimators': 100}"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_grid2.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1668511f-8727-4025-8d05-c04f7c284000",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_rf2=rf_grid2.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e6462364-8372-4e12-947a-39e51979a42a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6984126984126984\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y,y_pred_rf2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "872bdf62-3c23-4254-8a12-dd289318f7e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 1728 candidates, totalling 5184 fits\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, estimator=LGBMClassifier(),\n",
       "             param_grid={'learning_rate': [0.01, 0.1, 0.2],\n",
       "                         'max_depth': [1, 2, 4, -1],\n",
       "                         'n_estimators': [50, 100, 150, 200],\n",
       "                         'num_leaves': [10, 20, 30, 40],\n",
       "                         'reg_alpha': [0, 0.01, 0.1],\n",
       "                         'reg_lambda': [0, 0.01, 0.1]},\n",
       "             scoring='accuracy', verbose=1)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lgb_grid2=GridSearchCV(LGBMClassifier(),lgbmparams,scoring='accuracy',cv=3,verbose=1)\n",
    "lgb_grid2.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b405295e-4cbd-494f-ad38-9e3cb22bdbc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_lg2=lgb_grid2.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f4e52e7a-9081-4934-b254-7918c23ef104",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9047619047619048\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y,y_pred_lg2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "377672f1-1646-459e-9d7e-eb0930500b12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'learning_rate': 0.2,\n",
       " 'max_depth': 4,\n",
       " 'n_estimators': 200,\n",
       " 'num_leaves': 10,\n",
       " 'reg_alpha': 0,\n",
       " 'reg_lambda': 0}"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lgb_grid2.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "58ffcc07-a112-40e3-96c0-8ec248bfb5fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_importances=list(zip(lgb_grid2.best_estimator_.feature_name_,lgb_grid2.best_estimator_.feature_importances_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "14d7b50a-115f-48b8-b36c-dcd6878ce726",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_imp_df=pd.DataFrame(feature_importances,columns=[\"Feature\",\"Importance\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "ac0f372c-5927-4426-a29e-6d53eb8ac89f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>number_of_scores_of_4</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>X2</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>num_good_scores</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>X5</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>number_of_scores_of_3</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>number_of_scores_of_2</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>X3</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>X1</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>number_of_scores_of_5</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>X6</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>X4</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>num_bad_scores</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>number_of_scores_of_1</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Feature  Importance\n",
       "11  number_of_scores_of_4         128\n",
       "1                      X2          97\n",
       "6         num_good_scores          78\n",
       "4                      X5          75\n",
       "10  number_of_scores_of_3          69\n",
       "9   number_of_scores_of_2          58\n",
       "2                      X3          57\n",
       "0                      X1          55\n",
       "12  number_of_scores_of_5          36\n",
       "5                      X6          25\n",
       "3                      X4          22\n",
       "7          num_bad_scores          19\n",
       "8   number_of_scores_of_1          11"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp_df.sort_values(\"Importance\",ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "bf7aae5b-fb27-44d9-9ee1-034f8349fbd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_feature_importances=list(zip(rf_grid.best_estimator_.feature_names_in_,rf_grid.best_estimator_.feature_importances_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b3757d9b-a9f6-4aaa-959e-aefffa41288b",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_imp_rf_df=pd.DataFrame(rf_feature_importances,columns=[\"Feature\",\"Importance\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "7a4cd9ff-7639-49a8-a6bd-feb21179e99f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>X1</td>\n",
       "      <td>0.214935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>X5</td>\n",
       "      <td>0.189655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>X6</td>\n",
       "      <td>0.170439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>X4</td>\n",
       "      <td>0.157294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>X3</td>\n",
       "      <td>0.143782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>X2</td>\n",
       "      <td>0.123896</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Feature  Importance\n",
       "0      X1    0.214935\n",
       "4      X5    0.189655\n",
       "5      X6    0.170439\n",
       "3      X4    0.157294\n",
       "2      X3    0.143782\n",
       "1      X2    0.123896"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp_rf_df.sort_values(\"Importance\",ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c720b701-62e9-492c-9e0f-7b4f1f5a0569",
   "metadata": {},
   "source": [
    "Summary: Our best accuracy came from using a LightGBM model with some additional features relating to how many times the customer gave a particular score and how many good and bad scores there were. This had a 90.5% accuracy. To see which of the questions were most relevant, we looked at the Random Forest Model with just the original features. This suggested that \"X1\" and \"X5\" which represented on-time and satisfaction with the courier where the most important, with \"on-time\" being the most significant individual feature. There were no questions with very small importance, so I would not suggest removing any questions. The model using our extended feature set suggests that in general having a reasonable number of scores above 3 will also predict satisfaction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bd131d3-5e7b-4461-ab1a-f884883abdae",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
